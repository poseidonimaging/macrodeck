== DataService Schema

The MacroDeck Services framework will feature one prominent service: DataService.
This service will provide all of the data abstraction stuff for widgets,
other services, and so on. It therefore must be flexible.

This document describes the local data source storage format, or database
schema as some people call it. DataService should be capable of communicating
with remote sites and understanding that data; this feature won't be covered
here. The only thing we're going to explain here is how we store data locally.

== Introduction

The database will store data in any number of formats. We need to anticipate
this, as well as offer some kind of support for unknown formats. But, we
also need to be able to store standard values. The schema must satisfy that.
It'd also be pretty nice if it supported tagging, categorization, and so on.

So, anyway. Here's what I'm thinking of:

== Data Table

This is the real meat and potatoes. It stores data for everything that needs
to store things.

[id (primary key)]           
	An ID for each entry in the table. Indexed by MySQL.

[datatype (string)]
	A UUID representing the type of data stored in the table.
	We will provide a list of default data types. Custom data
	types will need to be registered with us somehow, so we
	have a tab on who created what data types and such.

[datacreator (string)]
	A UUID that identifies the widget that created this piece
	of data. Using the DataService, a widget could ask for
	something along the lines of "all events created by this
	widget"

[dataid (string)]
	A UUID that is unique for every piece of data. This should
	be filled in automatically by DataService.

[grouping (string)]
	A UUID that identifies a set or grouping of data. This is
	meant for data that makes sense grouped. For example,
	all events belonging to a particular calendar might have the
	same grouping. For items that are not grouped, this may be
	be NULL.

[owner (string)]
	A UUID that identifies the person or group that owns this
	data object. This may be the creator (and probably is in
	most cases).

[creator (string)]
	A UUID that identifies the person or group that created this
	data object. This will never change, even if its ownership
	is transferred to another user/group. Ownership is in the
	sense of data ownership. For example, if I post a message
	somewhere, I own that. Let's say, for example, that an
	administrator wants to post my message on the front page.
	They generate a copy, and become the owner of that copy,
	though I am the creator. In 95% of cases, the owner and
	creator are the same person. The 5% of the time that a
	distinction is needed makes things extremely annoying when
	systems don't understand that.

[creation (integer)]
	A UNIX timestamp set when the data item is created. A UNIX
	timestamp is the number of seconds elapsed since Janurary 1st,
	1970, 12:00AM. This seems the most logical way to store a time,
	since it's extremely portable. It can be converted to a readable
	date in almost every programming language.

[tags (text)]
	A list of textual tags used for searching/indexing this data.
	These tags are seperated with commas. If you need to use a comma
	in a tag, then you are insane and are attempting to use tags for
	some reason we didn't intend.

[title (string)]
	The title of the data. It may or may not be set, since some data
	can't have a title. But it should be set whenever possible, for
	searching and indexing purposes.

[description (text)]
	The description of the data. Again, this may not be set for
	data that can't have a description.
	
[stringdata (text)]
	If we're storing string data, the string data will be kept here.

[integerdata (integer)]
	If we're storing integer data (numbers), the string data will be kept
	here.
	
[objectdata (text)]
	If we need to store complex data, such as hashes, structures, and so
	on, we will store them here in YAML format.
	
[read_permissions (string)]
	A UUID that defines what set of read permissions to apply to this item.
	If this is NULL, it will default to denying everybody, but since the
	user is always allowed to view their data, it will become owner-read
	only.
	
[write_permissions (string)]
	A UUID that defines what set of write permissions to apply to this item.
	If this is NULL, it will default to denying everybody, but since the
	user is always allowed to edit their data, it will become owner-write
	only.
	
== Permissions Table

This table contains a bunch of allow/deny definitions that might be applied
to data items. There will be defaults. It's also possible that a bunch of
data items will have the same permissions, so that's allowed.

[id (primary key)]
	An ID for each item in the table. Indexed by MySQL.

[creator (string)]
	A UUID that indicates the user/group that made the permission. If this
	is set to MacroDeck's creator UUID (see below), this permission will
	show up for everyone.
	
[permissionid (string)]
	A UUID, assigned to a set of permissions (those that should be applied
	at the same time)
	
[order (integer)]
	A number indicating the order the permissions should be tested in. The
	order is on a per-set basis. Permissions are ordered ascending, so a
	permission item with an order of 0 will execute first.

[action (enum: "allow" or "deny")]
	Sets whether or not this permission will be granting someone access or
	denying someone access.
	
[applyto (string)]
	A UUID that indicates what user/group will be affected by this allow/deny.
	There are of course going to be default groups.
	
[en_title (string)]
	A human readable title. So users which actually do make custom permissions
	know what they're for. Since we're planning for multilingual capabilities,
	we're prefixing this column with en_. In the future, there might be a
	de_title, es_title, fr_title, and so on. The main purpose for the language
	distinction is that the global (anyone can set) permissions will need to
	be multilingual in the future. I should also note that the first permission
	will be the one that defines the title for the entire set, so if somehow
	the titles get out of sync in a set, you won't notice.
	
== Users Table

Every user on MacroDeck will belong in this table. Their passwords will be hashed
using the latest hashing techniques (if we can get away with SHA-256 or RMD-160,
we will use it).

[id (primary key)]
	An ID for each item in the table. Indexed by MySQL.

[uuid (string)]
	The user's UUID. Each user's UUID will be unique and different.

[username (string)]
	The user's username. Used for logging in. Must be lowercase and unique. Must
	also only contain alphanumeric (A-Z, a-z, 0-9) characters, underscore (_) and
	dash (-).
	
[password (string)]
	A hash of the user's password. We will use the most powerful hashing algorithm
	available to Ruby along with salting techniques to help against fraud and misuse.
	
[passwordhint (string)]
	An optional hint the user might set to help them remember their password if they
	forget it.
	
[secretquestion (string)]
	A secret question to ask the user if they forget their password. The user would
	be able to create his/her own or pick one from a list.
	
[secretanswer (string)]
	The answer to the previous secret question. It must be exactly the same, although
	case is unimportant (i.e. "Bob" and "bob" are the same).
	
[name (string)]
	The user's real name. Will be used in greeting the user if this name is set.
	Of course, we will only show their first name when there are two words in
	the sentence.
	
[displayname (string)]
	This is the name that will display on all content they create. This should always
	be set, and it can be changed when registering. By default, it will be the
	formatted version of a nickname. For example, when I register, I might type in
	"Ziggy the Hamster" as my nickname, and it might say "That name is illegal, but
	the following are not: ziggy_the_hamster, ziggythehamster", and when I get to the
	part where I can pick a display name, "Ziggy the Hamster" will be entered. In
	cases where this cannot be detected, it will default to the nickname they did
	enter.

[creation (integer)]
	The UNIX time this user was created.
	
[birthdate (date)]
	The user's birthdate. We may require this for the purposes of verifying the user's
	secret question/answer.
	
== Groups Table

The groups table will be simpler than the user table simply because of the fact that
there's no identity items kept. Members and their level of participation in the group
(user, moderator, administrator) are kept in a seperate table, group members.

[id (primary key)]
	An ID for each item in the table. Indexed by MySQL.

[groupid (string)]
	A UUID that is unique to the group.

[groupname (string)]
	A simple, alphanumeric (plus _ and -) name for the group. For example, a group
	for MacroDeck developers might be called "macrodeck" in this field.

[displayname (string)]
	A long name for the group. Carrying on the previous example, this might be
	"MacroDeck Developers"
	
[creation (integer)]
	The UNIX time this user was created.
	
== Group Members Table

This table will assign users to groups and set their level within the group. In
order to be simple here, there will be three levels of participation within a
group. User, moderator, and administrator. In the context of an ecosystem, which
will contain any number of groups, there might be a "group administrator" and
"ecosystem administrator", but we'll have to wait until ecosystems are being
developed to correctly figure that out. This table is simple. It's supposed to be.

[id (primary key)]
	Again, this is because MySQL needs it to make things speedy, and because
	Rails doesn't love us unless we have a primary key.
	
[groupid (string)]
	The UUID of the group that will have the member listed in this column.
	
[userid (string)]
	The UUID of the user that will be a member of the group specified.
	
[level (enum: "user", "moderator", or "administrator")]
	The level of the user.
	
[isbanned (boolean)]
	Whether or not the user is banned from the group. Banning is different from
	deletion, because they are not able to rejoin the group if they are banned.
	Their level will remain the same as it was when they were banned, in case
	a hack occurs.
	
== Profiles Table

This table is not going to be completely defined yet, but I will go ahead and
define the idea. Different pieces of data will be associated with a user or
group. The user or group will be picked in one column. The profile item will
be picked in another column, and the data will be specified in another. This
is not the fastest way to do it, but if we ever define other profile fields,
we don't have to alter the table layout. Also, users or widgets or ecosystems
could define their own profile fields and store them here. It also makes data
abstraction an easy job. For example, the following code is simple, and would
be possible with the current idea:

   UserService.getProfileItem("ziggythehamster", authCode, "location")

Specifying all of the fields does not give us this kind of versitility. It may
also be slower in the long run depending on the kind of performance we get from
MySQL and the filesystem.
	
== Default UUIDs

I figured that, since our data depends heavily on UUIDs, that I'd define a bunch
of default UUIDs for all of the different things that may need them. So, here
they are:

[MacroDeck Creator ID]
	7b7e7c62-0a56-4785-93d5-6e689c9793c9
	
	This ID is used to signify things that MacroDeck itself creates. It can be
	used anywhere a user is expected. Permissions with this Creator ID will show
	up to everyone.
	
[Registered Users Group]
	6df561e7-3653-441b-af1d-69a64022724b
	
	You should use this Group ID when you want to create a permission or something
	that applies to all registered users. It does not apply to guests.

[Guests Group]
	5c872308-4ab4-4e8b-ac50-1d7408b9f32c
	
	This ID applies ONLY to guests, that is, people who are not logged in. You'd use
	it in permissions and stuff where you want something to be visible (or not) to
	guests.

[Everyone Group]
	e09709cb-515b-4723-9119-8af627ac3608
	
	This ID should be used when you want to create a permission or something that
	applies to everybody, registered users and guests included.
	
== Permission Notes

The one thing that I did not make clear in any text above is how permissions apply
to you. The main thing is that you should *always* be able to view your own data.
Also, read and write permissions will be stored in the same table. 

== User Sessions

Sessions are very important. A session ID prevents us from having to send the user's
password or a password token over a connection. All of the user data-grabbing
functions will require a valid session ID (or authCode). There are a lot of factors
we need to take in account when picking what criteria to base a session ID off of.
First of all, the annoyance factor. We shouldn't pick criteria that will cause the
user to have to re-enter his password every few minutes. Then again, we shouldn't
allow him to close the browser and come back a week later. So, here's how I propose
we should compose session IDs, assuming that there isn't a default Rails one that
takes all of this information into account already:

* Username.
* First 24 bits of their IP address (i.e. if my IP is 1.2.3.4, we should make the
  session valid for 1.2.3.anything).
* A hash of their password.
* A code that represents the week and month the session was created (so after a
  week, the session would expire; only bad side is for people who create their sessions
  Sunday night).
* A server-specific salt that is different from the password salt (to be changed
  only if there's a massive server attack involving logged in users, as changing the
  salt will cause everybody to log out).
* Browser. As specific as Mozilla/5.0 or Opera/9.0 or Mozilla/4.0 (IE).
   
All of those things combined, put into a unique hash together, should be able to
satisfactorily identify a user securely without divulging their password. An
attacker on the same subnet using the same browser could take their session ID,
if it's fresh enough, and get access, but the probability that will happen is
very low.

I think Rails has a built in session handler, and if this is the case, I will
use it instead, and possibly just store a security key in the user table using
a few of these data items (so the Rails session handler will store sessions
using its own secure ways, and we'll do our own verification on that data, as
an extra step).

If Rails doesn't have a suitable session handler, the user sessions will be
stored in a session table that will be periodically cleaned out of old sessions
(so, it's possible that we may not need the datecode) using cron jobs.

All API functions will require a valid session ID. We will *not* allow passwords
to be transferred over the Internet. Instead, some sort of token-based security
protocol will be used to generate remote session IDs/auth codes. Basically,
the functions carried out would look something like this (I'm going to use
some Ruby conventions here):

   # This function gets a value that both sides will know.
   UserService.getAuthToken("ziggythehamster")
   => "97b1a3632912a05a9bdc8a564d5b1c57"
   # This value is the MD5 sum of "5f4dcc3b5aa765d61d8327deb882cf99:97b1a3632912a05a9bdc8a564d5b1c57",
   # or, MD5(MD5("password") + ":" + "97b1a3632912a05a9bdc8a564d5b1c57"). Of course, the
   # password will need to be hashed using the same format we use, and the remote site
   # will also need to know our salt, so it may make sense to not have a salt in this case.
   # Basically, the server would do this math on its site:
   # MD5(password-stored-in-database-hashed + ":" + auth-token) and if it matches
   # what the other side sent, the other side knows the password, and the user
   # should be allowed remote access via an API.
   UserService.getAuthCode("ziggythehamster", "73ca1fa9fccf37663e3b670bb294b055")
   => some valid session ID
   
Keep in mind though, that this stuff would be accessed via remote via SOAP or
XML-RPC and not Ruby, though internally the functions would be handled as
Ruby.

If that made any sense to you, great. Otherwise, well, it's hard to explain
security any simpler than that. If I had to, I'd just have to say that it'll
be secure, and it'll work. And hopefully not be annoying.
